#include <iostream>
using namespace std;

void FillRand(int arr[], const int n);
void Print(int arr[], const int n);

int* push_back(int arr[], int& n, const int value);
int* push_front(int arr[], int& n, const int value);

int* pop_back(int arr[], int& n);
int* pop_front(int arr[], int& n);

void main()
{
	setlocale(LC_ALL, "");
	int n;
	cout << "Введите размер массива: "; cin >> n;
	int* arr = new int[n]; //Объявление динамического массива

	FillRand(arr, n);
	Print(arr, n);

	int value;
	cout << "Введите добавляемое значение: "; cin >> value;
	arr = push_back(arr, n, value);
	Print(arr, n);

	cout << "Введите добавляемое значение: "; cin >> value;
	arr = push_front(arr, n, value);
	Print(arr, n);

	arr = pop_back(arr, n);
	Print(arr, n);
	
	arr = pop_front(arr, n);
	Print(arr, n);

	//delete[] arr;
}

void FillRand(int arr[], const int n)
{
	for (int i = 0; i < n; i++)
	{
		*(arr + i) = rand() % 100; //Через арифметику указателей и оператор разыменовывания
	}
}
void Print(int arr[], const int n)
{
	cout << arr << endl;
	cout << *arr << endl;
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << "\t"; //Через оператор индексирования
	}
	cout << endl;
}

int* push_back(int arr[], int& n, const int value)
{
	//1) Создаем буферный массив нужного размера:

	int* buffer = new int[n + 1];

	//2) Копируем все элементы из исходного массива в буферный:

	for (int i = 0; i < n; i++)
	{
		buffer[i] = arr[i];
	}

	//3) Удаляем исходный массив:

	delete[] arr;

	//4) Подменяем адрес исходного массива адресом нового массива:

	arr = buffer;
	buffer = nullptr; //nullptr - это указатель на ноль

	//5) Только после всего выше написанного, в массиве "arr" появляется элемент, в который можно сохранить добавляемое значение:

	arr[n] = value;

	//6) После добавления элемента в массив, количество его элементов увеличивается на 1

	n++;

	//7) Mission complete - значение добавлено
	return arr;
}
int* push_front(int arr[], int& n, const int value)
{
	//1) Создаем буферный массив

	int* buffer = new int[n + 1];
	
	//2)

	for (int i = 0; i < n; i++)
	{
		buffer[i + 1] = arr[i];
	}
	//3)

	delete[] arr;

	//4)

	buffer[0] = value;

	//5)

	n++;

	return buffer;
}

int* pop_back(int arr[], int& n)
{
	int* buffer = new int[--n];
	for (int i = 0; i < n; i++)buffer[i] = arr[i];
	delete[] arr;
	return buffer;
}
int* pop_front(int arr[], int& n)
{
	int* buffer = new int[--n];
	for (int i = 0; i < n; i++)buffer[i] = arr[i + 1];
	delete[]arr;
	return buffer;
}

/*
Динамические массивы:

Для того, чтобы объявить динамический массив нужно объявить указатель и выделить память при помощи оператора "new".
Оператор "new" выделяет непрерывный блок памяти для n-элементов заданного типа (в нашем случае int) и возвращает адрес выделенной памяти. Этот адрес мы и записываем в указатель "arr".

Stack - это модель памяти из которой последний записанный элемент считывается первым (статическая память)
Heap - динамическая память.

Динамическую память распределяет операционная система, и оператор "new" как раз запрашивает эту память у операционной системы.

Передача динамического массива в функцию:

При передаче как статического, так и динамического массива в функцию, в неё копируется указатель на начальный элемент массива и функция, фактически, не знает, какой массив в неё передали.
Исходя из этого одна и та же функция может работать как со статическими, так и с динамическими массивами

При передаче массива в функцию в неё копируется адрес нулевого элемента массива, а следовательно и всего массива, потому что массив - это указатель

Удаление динамического массива:

Оператор "new" запрашивает выделяемую память у операционной системы и если у нее есть непрерывный блок памяти нужного размера - она выделяет её, 
а оператор "new" возвращает адрес выделенной памяти. В противном случае, если блока памяти нет, то оператор "new" бросает "исключение".

Если память выделилась и мы можем ее использовать, то после её использования её обязательно нужно вернуть обратно операционной системе. 
Потому что оператор "new" якобы берет эту память "в долг" у операционной системы. Эту задачу выполняет оператор "delete". 

Если память не возвращать, то возникает утечка памяти (memory leak). Если утечки памяти возникают постоянно, то рано или поздно вся свободная память в операционной системе закончится.
И это приведет к аварийному завершению нашей программы с потерей данных.

Оператор "delete" должен быть вызван столько раз, сколько был вызван оператор "new".
Оператор "delete" можно вызывать в разных функциях.
*/